---
layout: post
title: "iOS_Q&amp;A"
date: 2017-12-24 14:46:28 +0800
comments: true
categories: 
---

### Q1.通知是同步还是异步？

 - A1:通知是同步的。测试如下：
 
 ```
 [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(print:) name:@"GCDNotification" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(print1:) name:@"GCDNotification" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(print2:) name:@"GCDNotification" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(print3:) name:@"GCDNotification" object:nil];
    
    [[NSNotificationCenter defaultCenter] postNotificationName:@"GCDNotification" object:nil];
        NSLog(@"发出通知----%@",[NSThread currentThread]);
    
    - (void)print:(NSNotification *)notif{
        NSLog(@"0收到通知----%@",[NSThread currentThread]);
        
        sleep(10);
}
// log 
2017-12-24 15:07:58.552422+0800 KVOTest[7306:368524] 0收到通知----<NSThread: 0x604000066840>{number = 1, name = main}
2017-12-24 15:08:08.553940+0800 KVOTest[7306:368524] 1收到通知----<NSThread: 0x604000066840>{number = 1, name = main}
2017-12-24 15:08:18.555010+0800 KVOTest[7306:368524] 2收到通知----<NSThread: 0x604000066840>{number = 1, name = main}
2017-12-24 15:08:28.557206+0800 KVOTest[7306:368524] 3收到通知----<NSThread: 0x604000066840>{number = 1, name = main}
2017-12-24 15:08:38.559301+0800 KVOTest[7306:368524] 发出通知----<NSThread: 0x604000066840>{number = 1, name = main}
 ```
 
 - 模拟实现异步接收的效果如下：
 
 ```
- (void)print:(NSNotification *)notif{
    dispatch_async(dispatch_get_global_queue(0, 0), ^{
        NSLog(@"0收到通知----%@",[NSThread currentThread]);
        
        sleep(10);
    });
}
// log
2017-12-24 15:11:09.680454+0800 KVOTest[7325:373178] 2收到通知----<NSThread: 0x60000026c880>{number = 5, name = (null)}
2017-12-24 15:11:09.680454+0800 KVOTest[7325:373056] 3收到通知----<NSThread: 0x60400006e800>{number = 1, name = main}
2017-12-24 15:11:09.680488+0800 KVOTest[7325:373176] 0收到通知----<NSThread: 0x60000026c040>{number = 3, name = (null)}
2017-12-24 15:11:09.680491+0800 KVOTest[7325:373175] 1收到通知----<NSThread: 0x60400027d440>{number = 4, name = (null)}
2017-12-24 15:11:19.682627+0800 KVOTest[7325:373056] 发出通知----<NSThread: 0x60400006e800>{number = 1, name = main}
```
 

### Q2.UIView和CALayer的父类及关系？
 - UIView的父类是UIResponse，可以响应事件和手势
 - CALyer的父类是NSObject，不可以响应事件和手势，更偏重内容绘制
 - 每个UIView都有自己的CALayer，UIView的frame只是返回CALayer的frame
 - 在 View显示的时候，UIView 做为 Layer 的 CALayerDelegate

### Q3.手动设置UIView的bounds会怎样？
 - [UIview setBounds:]改变当前view相对于子view的坐标原点。
 
 ```
 UIView *view1 = [[UIView alloc] initWithFrame:CGRectMake(0,0, 375, 100)];
    [view1 setBackgroundColor:[UIColor grayColor]];
    [self.view addSubview:view1];
    
    // 改变后，view1的原点在（0，-100）位置
    self.view.bounds = CGRectMake(0, -100, CGRectGetWidth(self.view.frame), CGRectGetHeight(self.view.frame));
 ```
 
 {% img /images/noSetBounds.png %}
 {% img /images/setBounds.png %}

### Q4.在xib中创建一个全view大小的tableview，会不会被导航栏遮挡？为什么？
 - 正常情况下，导航栏的透明度可影响视图是否被遮挡
 
 ```
 // 设置不透明，self.view在导航栏下面展示，不遮挡
 // 否则，self.view为全屏展示，会被导航栏遮挡
 self.navigationController.navigationBar.translucent = NO;
 ```
 - 在不考虑以上透明度的影响，tableview不被遮挡的同时还需要滑动时在不透明的导航栏中透出
 
 ```
  // iOS10 以上系统自动设置，以下需要手动设置
  [self.tableView setContentInset:UIEdgeInsetsMake(64, 0, 0, 0)];
 ```

### Q5.动态库和静态库的区别？系统库属于哪种？
 - 静态库以.a和.framework作为文件后缀名，在使用时会被完全的copy一份到文件中，多次使用就包含多次拷贝文件，平时使用的第三方库大部分都是静态库，会使app的体积变大。
 - 动态库以.framework和.tbd(之前叫.dylib)作为文件后缀名，在使用时不会拷贝，由系统动态加载到内存中，只加载一次，多次使用可节省空间。如系统库UIKit等都是动态库。
 - 动态库制作可以包含其他静态库(.a/.framework)
 - 静态库制作可以包含其他静态库(.a/.framework）
 
 
### Q6.为什么加载xib文件比纯代码耗时？
 - xib实质是xml文件，系统先要解析xml文件中的view及参数属性。
 
### Q7.podfile.lock的作用？
 - 在使用命令【pod install】以后会生成podfile.lock文件，这个文件中保存已经安装的Pods依赖库的版本。
 - 在多人协作时，特别是在podfile文件中没有指定依赖版本号时，如果有podfile.lock文件，其他人在执行【pod install】时就会和最开始的用户保持版本一致。如果没有podfile.lock文件，可能更新出不同的版本。所以podfile.lock需要加入版本管理。
 
 ```
 // podfile 
 platform :ios, '9.0'
def shared_pods
	pod 'FMDB' // 不指定版本，获取最新版本
end
target 'LittleNotes' do 
	shared_pods
end
target 'LittleNotesWidget' do
	shared_pods
end
 ```
 
 ```
 //podfile.lock
 PODS:
  - FMDB (2.7.2):
    - FMDB/standard (= 2.7.2)
  - FMDB/standard (2.7.2)
DEPENDENCIES:
  - FMDB
SPEC CHECKSUMS:
  FMDB: 6198a90e7b6900cfc046e6bc0ef6ebb7be9236aa
PODFILE CHECKSUM: f5e7b7c51ca371b02aa28c158108e5f9ccdf3033
COCOAPODS: 1.3.1
 ```

